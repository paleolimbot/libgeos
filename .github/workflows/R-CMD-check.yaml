on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '3.6', geos: 'internal'}
          - {os: macOS-latest,   r: '4.0', geos: 'internal'}
          - {os: windows-latest, r: '4.0', geos: 'internal'}
          - {os: ubuntu-16.04,   r: '4.0', geos: 'internal', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-1-

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show install output
        if: always()
        run: find check -name '00install.out*' -exec cat '{}' \; || true
        shell: bash

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Install package
        run: remotes::install_local("check/libgeos.Rcheck/libgeos", build = FALSE)
        shell: Rscript {0}

      - name: Checkout paleolimbot/geos
        uses: actions/checkout@v2
        with:
          repository: paleolimbot/geos
          ref: master
          path: 'geos'

      - name: Check paleolimbot/geos
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          install.packages("wk")
          rcmdcheck::rcmdcheck("geos", args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check_geos")
        shell: Rscript {0}

      - name: Show testthat output (paleolimbot/geos)
        if: always()
        run: find check_geos -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-${{ matrix.config.geos }}-geos-results
          path: check
